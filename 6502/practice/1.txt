;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Constant values
;
define n 	   $05		; Input "n" parameter

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Addresses
;
define ans_addr	   $01   	; Final answer will be stored at $0001. 
define temp_addr   $02		; Temporary values can be stored at $0002.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Main Program
; -- Push n then y onto the stack
; -- Call function e
; -- The pop the result from the stack and store it in ans_addr
LDA #n
PHA 
JSR f
PLA ; get result
STA ans_addr
BRK

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; F(n) = 2 * F(n-1) - 3
; F(0) = 4
; 
f: 
	;
	; Load the "n" parameter from SP + 3
	TSX
	TXA
	CLC
	ADC #$03
	TAY
	LDA $0100, Y

	;
	; Check if n=0.  If so, then implement the base case of our recursion.
	;
	CMP #0
	BEQ base_case

	;
	; If acc > 0, 
	; then subtract 1 from n and make the recursive call.
	SEC
	SBC #$01
	PHA 
	JSR f

	;
	; Pull the result of the subroutine call.  This is the result of f(n-1)
	PLA 
	
	; Double the accumulator  (2 * F(n-1))
	STA temp_addr
	ADC	temp_addr

	; Subtract the 3 from the accumulator to complete the calculation
	SEC
	SBC #$03
	JMP merged_code

base_case:
	; If n=0.... F(0) = 4
	LDA #$04

merged_code:
	; Store the return value in the temp_addr for safe keeping while
	; we calculate the return address.
	STA temp_addr

	;
	; Calculate the address for the return value.
	;
	TSX
	TXA
	CLC
	ADC #$03
	TAY

	;
	; Reload the return value from temp_addr and then write it into the stack
	;
	LDA temp_addr
	STA $0100, Y

	RTS
